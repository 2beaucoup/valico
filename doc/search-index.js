var searchIndex = {};
searchIndex['valico'] = {"items":[[0,"","valico",""],[11,"as_object_mut","rustc-serialize::json","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",0],[11,"as_array_mut","","",0],[0,"common","valico",""],[0,"error","valico::common",""],[6,"ValicoErrors","valico::common::error",""],[8,"ValicoError","",""],[10,"get_code","","",1],[10,"get_path","","",1],[10,"get_title","","",1],[11,"get_detail","","",1],[11,"to_json","alloc::boxed","",2],[11,"is","valico::common","Returns true if the boxed type is the same as `T`",1],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",1],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",1],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",1],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",1],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",1],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",1],[0,"json_dsl","valico",""],[3,"Param","valico::json_dsl",""],[12,"name","","",3],[12,"coercer","","",3],[12,"nest","","",3],[12,"description","","",3],[12,"allow_null","","",3],[12,"validators","","",3],[12,"default","","",3],[12,"schema_builder","","",3],[12,"schema_id","","",3],[3,"Builder","",""],[3,"StringCoercer","",""],[3,"I64Coercer","",""],[3,"U64Coercer","",""],[3,"F64Coercer","",""],[3,"BooleanCoercer","",""],[3,"NullCoercer","",""],[3,"ArrayCoercer","",""],[3,"ObjectCoercer","",""],[3,"ExtendedResult","",""],[4,"PrimitiveType","",""],[13,"String","","",4],[13,"I64","","",4],[13,"U64","","",4],[13,"F64","","",4],[13,"Boolean","","",4],[13,"Null","","",4],[13,"Array","","",4],[13,"Object","","",4],[13,"File","","",4],[5,"i64","",""],[5,"u64","",""],[5,"f64","",""],[5,"string","",""],[5,"boolean","",""],[5,"null","",""],[5,"array","",""],[5,"array_of","",""],[5,"encoded_array","",""],[5,"encoded_array_of","",""],[5,"object","",""],[11,"new","","",5],[11,"build","","",5],[11,"get_required","","",5],[11,"get_optional","","",5],[11,"get_validators","","",5],[11,"req_defined","","",5],[11,"req_typed","","",5],[11,"req_nested","","",5],[11,"req","","",5],[11,"opt_defined","","",5],[11,"opt_typed","","",5],[11,"opt_nested","","",5],[11,"opt","","",5],[11,"validate","","",5],[11,"validate_with","","",5],[11,"mutually_exclusive","","",5],[11,"exactly_one_of","","",5],[11,"at_least_one_of","","",5],[11,"schema_id","","",5],[11,"schema","","",5],[11,"build_schemes","","",5],[11,"process","","",5],[11,"process_nest","","",5],[11,"get_primitive_type","","",6],[11,"coerce","","",6],[11,"get_primitive_type","","",7],[11,"coerce","","",7],[11,"get_primitive_type","","",8],[11,"coerce","","",8],[11,"get_primitive_type","","",9],[11,"coerce","","",9],[11,"get_primitive_type","","",10],[11,"coerce","","",10],[11,"get_primitive_type","","",11],[11,"coerce","","",11],[11,"new","","",12],[11,"encoded","","",12],[11,"encoded_of","","",12],[11,"of_type","","",12],[11,"get_primitive_type","","",12],[11,"coerce","","",12],[11,"get_primitive_type","","",13],[11,"coerce","","",13],[11,"new","","",3],[11,"new_with_coercer","","",3],[11,"new_with_nest","","",3],[11,"build","","",3],[11,"desc","","",3],[11,"schema_id","","",3],[11,"schema","","",3],[11,"coerce","","",3],[11,"nest","","",3],[11,"allow_null","","",3],[11,"regex","","",3],[11,"validate","","",3],[11,"validate_with","","",3],[11,"process","","",3],[11,"allow_values","","",3],[11,"reject_values","","",3],[11,"default","","",3],[0,"errors","",""],[3,"Required","valico::json_dsl::errors",""],[12,"path","","",14],[3,"WrongType","",""],[12,"path","","",15],[12,"detail","","",15],[3,"WrongValue","",""],[12,"path","","",16],[12,"detail","","",16],[3,"MutuallyExclusive","",""],[12,"path","","",17],[12,"detail","","",17],[12,"params","","",17],[3,"ExactlyOne","",""],[12,"path","","",18],[12,"detail","","",18],[12,"params","","",18],[3,"AtLeastOne","",""],[12,"path","","",19],[12,"detail","","",19],[12,"params","","",19],[11,"fmt","","",14],[11,"description","","",14],[11,"fmt","","",14],[11,"get_code","","",14],[11,"get_title","","",14],[11,"get_path","","",14],[11,"to_json","","",14],[11,"fmt","","",15],[11,"description","","",15],[11,"fmt","","",15],[11,"get_code","","",15],[11,"get_title","","",15],[11,"get_path","","",15],[11,"get_detail","","",15],[11,"to_json","","",15],[11,"fmt","","",16],[11,"description","","",16],[11,"fmt","","",16],[11,"get_code","","",16],[11,"get_title","","",16],[11,"get_path","","",16],[11,"get_detail","","",16],[11,"to_json","","",16],[11,"fmt","","",17],[11,"description","","",17],[11,"fmt","","",17],[11,"get_code","","",17],[11,"get_title","","",17],[11,"get_path","","",17],[11,"get_detail","","",17],[11,"to_json","","",17],[11,"fmt","","",18],[11,"description","","",18],[11,"fmt","","",18],[11,"get_code","","",18],[11,"get_title","","",18],[11,"get_path","","",18],[11,"get_detail","","",18],[11,"to_json","","",18],[11,"fmt","","",19],[11,"description","","",19],[11,"fmt","","",19],[11,"get_code","","",19],[11,"get_title","","",19],[11,"get_path","","",19],[11,"get_detail","","",19],[11,"to_json","","",19],[0,"validators","valico::json_dsl",""],[3,"AllowedValues","valico::json_dsl::validators",""],[3,"AtLeastOneOf","",""],[3,"ExactlyOneOf","",""],[3,"MutuallyExclusive","",""],[3,"RejectedValues","",""],[11,"new","","",20],[11,"validate","","",20],[11,"new","","",21],[11,"validate","","",21],[11,"new","","",22],[11,"validate","","",22],[11,"new","","",23],[11,"validate","","",23],[11,"validate","regex::re","",24],[11,"new","valico::json_dsl::validators","",25],[11,"validate","","",25],[6,"ValidatorResult","",""],[6,"BoxedValidator","",""],[6,"Validators","",""],[8,"Validator","",""],[10,"validate","","",26],[11,"fmt","valico::json_dsl","",26],[8,"Coercer","",""],[10,"get_primitive_type","","",27],[10,"coerce","","",27],[11,"new","","",28],[11,"with_errors","","",28],[11,"is_valid","","",28],[11,"append","","",28],[0,"json_schema","valico",""],[4,"PrimitiveType","valico::json_schema",""],[13,"Array","","",29],[13,"Boolean","","",29],[13,"Integer","","",29],[13,"Number","","",29],[13,"Null","","",29],[13,"Object","","",29],[13,"String","","",29],[0,"helpers","",""],[5,"generate_id","valico::json_schema::helpers",""],[5,"encode","","http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-07"],[5,"connect","","Encode and connect"],[5,"parse_url_key","",""],[5,"parse_url_key_with_base","",""],[5,"alter_fragment_path","",""],[5,"serialize_schema_path","",""],[5,"whatwg_extended_scheme_type_mapper","","Stub function to add our \"json-schema\" to the url::UrlParser"],[0,"keywords","valico::json_schema",""],[3,"KeywordConsumer","valico::json_schema::keywords",""],[12,"keys","","",30],[12,"keyword","","",30],[5,"default","",""],[5,"decouple_keyword","",""],[0,"multiple_of","",""],[3,"MultipleOf","valico::json_schema::keywords::multiple_of",""],[11,"compile","","",31],[0,"maxmin","valico::json_schema::keywords",""],[3,"Minimum","valico::json_schema::keywords::maxmin",""],[3,"Maximum","",""],[11,"compile","","",32],[11,"compile","","",33],[0,"maxmin_length","valico::json_schema::keywords",""],[3,"MaxLength","valico::json_schema::keywords::maxmin_length",""],[3,"MinLength","",""],[11,"compile","","",34],[11,"compile","","",35],[0,"maxmin_items","valico::json_schema::keywords",""],[3,"MaxItems","valico::json_schema::keywords::maxmin_items",""],[3,"MinItems","",""],[11,"compile","","",36],[11,"compile","","",37],[0,"pattern","valico::json_schema::keywords",""],[3,"Pattern","valico::json_schema::keywords::pattern",""],[11,"compile","","",38],[0,"unique_items","valico::json_schema::keywords",""],[3,"UniqueItems","valico::json_schema::keywords::unique_items",""],[11,"compile","","",39],[0,"items","valico::json_schema::keywords",""],[3,"Items","valico::json_schema::keywords::items",""],[11,"compile","","",40],[0,"maxmin_properties","valico::json_schema::keywords",""],[3,"MaxProperties","valico::json_schema::keywords::maxmin_properties",""],[3,"MinProperties","",""],[11,"compile","","",41],[11,"compile","","",42],[0,"required","valico::json_schema::keywords",""],[3,"Required","valico::json_schema::keywords::required",""],[11,"compile","","",43],[0,"properties","valico::json_schema::keywords",""],[3,"Properties","valico::json_schema::keywords::properties",""],[11,"compile","","",44],[0,"dependencies","valico::json_schema::keywords",""],[3,"Dependencies","valico::json_schema::keywords::dependencies",""],[11,"compile","","",45],[0,"enum_","valico::json_schema::keywords",""],[3,"Enum","valico::json_schema::keywords::enum_",""],[11,"compile","","",46],[0,"type_","valico::json_schema::keywords",""],[3,"Type","valico::json_schema::keywords::type_",""],[11,"compile","","",47],[0,"of","valico::json_schema::keywords",""],[3,"AllOf","valico::json_schema::keywords::of",""],[3,"AnyOf","",""],[3,"OneOf","",""],[11,"compile","","",48],[11,"compile","","",49],[11,"compile","","",50],[0,"ref_","valico::json_schema::keywords",""],[3,"Ref","valico::json_schema::keywords::ref_",""],[11,"compile","","",51],[0,"not","valico::json_schema::keywords",""],[3,"Not","valico::json_schema::keywords::not",""],[11,"compile","","",52],[0,"format","valico::json_schema::keywords",""],[3,"Format","valico::json_schema::keywords::format",""],[12,"formats","","",53],[6,"FormatBuilders","",""],[11,"new","","",53],[11,"with","","",53],[11,"compile","","",53],[6,"KeywordResult","valico::json_schema::keywords",""],[6,"KeywordPair","",""],[6,"KeywordPairs","",""],[6,"KeywordMap","",""],[8,"Keyword","",""],[10,"compile","","",54],[11,"is","valico::json_schema","Returns true if the boxed type is the same as `T`",54],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",54],[11,"downcast_ref_unchecked","","Returns a reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",54],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",54],[11,"downcast_mut_unchecked","","Returns a mutable reference to the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",54],[11,"downcast","","Returns the boxed value if it is of type `T`, or `Err(Self)` if it isn't.",54],[11,"downcast_unchecked","","Returns the boxed value, blindly assuming it to be of type `T`.\nIf you are not *absolutely certain* of `T`, you *must not* call this.",54],[11,"fmt","","",54],[11,"fmt","valico::json_schema::keywords","",30],[11,"consume","","",30],[0,"schema","valico::json_schema",""],[3,"WalkContext","valico::json_schema::schema",""],[12,"url","","",55],[12,"fragment","","",55],[12,"scopes","","",55],[3,"ScopedSchema","",""],[3,"Schema","",""],[12,"id","","",56],[3,"CompilationSettings","",""],[12,"keywords","","",57],[12,"ban_unknown_keywords","","",57],[4,"SchemaError","",""],[13,"WrongId","","",58],[13,"IdConflicts","","",58],[13,"NotAnObject","","",58],[13,"UrlParseError","","",58],[13,"UnknownKey","","",58],[13,"Malformed","","",58],[12,"path","valico::json_schema::schema::SchemaError","",58],[12,"detail","","",58],[5,"compile","valico::json_schema::schema",""],[11,"fmt","","",55],[11,"escaped_fragment","","",55],[11,"fmt","","",58],[11,"fmt","","",59],[6,"Target","",""],[11,"deref","","",59],[11,"new","","",59],[11,"validate","","",59],[11,"validate_in","","",59],[11,"fmt","","",56],[11,"new","","",57],[11,"resolve","","",56],[11,"resolve_fragment","","",56],[0,"scope","valico::json_schema",""],[3,"Scope","valico::json_schema::scope",""],[11,"fmt","","",60],[11,"new","","",60],[11,"without_formats","","",60],[11,"with_formats","","",60],[11,"compile","","",60],[11,"compile_with_id","","",60],[11,"compile_and_return","","",60],[11,"compile_and_return_with_id","","",60],[11,"add_keyword","","",60],[11,"resolve","","",60],[0,"validators","valico::json_schema",""],[3,"MultipleOf","valico::json_schema::validators",""],[12,"number","","",61],[3,"Maximum","",""],[12,"number","","",62],[12,"exclusive","","",62],[3,"Minimum","",""],[12,"number","","",63],[12,"exclusive","","",63],[3,"MaxLength","",""],[12,"length","","",64],[3,"MinLength","",""],[12,"length","","",65],[3,"Pattern","",""],[12,"regex","","",66],[3,"MaxItems","",""],[12,"length","","",67],[3,"MinItems","",""],[12,"length","","",68],[3,"UniqueItems","",""],[3,"MaxProperties","",""],[12,"length","","",69],[3,"MinProperties","",""],[12,"length","","",70],[3,"Required","",""],[12,"items","","",71],[3,"Enum","",""],[12,"items","","",72],[3,"AllOf","",""],[12,"schemes","","",73],[3,"AnyOf","",""],[12,"schemes","","",74],[3,"OneOf","",""],[12,"schemes","","",75],[3,"Ref","",""],[12,"url","","",76],[3,"Not","",""],[12,"url","","",77],[3,"ValidationState","",""],[12,"errors","","",78],[12,"missing","","",78],[11,"validate","","",61],[11,"validate","","",62],[11,"validate","","",63],[11,"validate","","",64],[11,"validate","","",65],[11,"validate","","",66],[11,"validate","","",67],[11,"validate","","",68],[11,"validate","","",79],[0,"items","",""],[3,"Items","valico::json_schema::validators::items",""],[12,"items","","",80],[12,"additional","","",80],[4,"ItemsKind","",""],[13,"Schema","","",81],[13,"Array","","",81],[4,"AdditionalKind","",""],[13,"Boolean","","",82],[13,"Schema","","",82],[11,"fmt","","",81],[11,"fmt","","",82],[11,"validate","","",80],[11,"validate","valico::json_schema::validators","",69],[11,"validate","","",70],[11,"validate","","",71],[0,"properties","",""],[3,"Properties","valico::json_schema::validators::properties",""],[12,"properties","","",83],[12,"additional","","",83],[12,"patterns","","",83],[4,"AdditionalKind","",""],[13,"Boolean","","",84],[13,"Schema","","",84],[11,"fmt","","",84],[11,"validate","","",83],[0,"dependencies","valico::json_schema::validators",""],[3,"Dependencies","valico::json_schema::validators::dependencies",""],[12,"items","","",85],[4,"DepKind","",""],[13,"Schema","","",86],[13,"Property","","",86],[11,"fmt","","",86],[11,"validate","","",85],[11,"validate","valico::json_schema::validators","",72],[0,"type_","",""],[3,"Type","valico::json_schema::validators::type_",""],[12,"item","","",87],[4,"TypeKind","",""],[13,"Single","","",88],[13,"Set","","",88],[11,"fmt","","",88],[11,"validate","","",87],[11,"validate","valico::json_schema::validators","",73],[11,"validate","","",74],[11,"validate","","",75],[11,"validate","","",76],[11,"validate","","",77],[0,"formats","",""],[3,"Ipv4","valico::json_schema::validators::formats",""],[3,"Ipv6","",""],[3,"Uuid","",""],[3,"Uri","",""],[11,"validate","","",89],[11,"validate","","",90],[11,"validate","","",91],[11,"validate","","",92],[6,"BoxedValidator","valico::json_schema::validators",""],[6,"Validators","",""],[8,"Validator","",""],[10,"validate","","",93],[11,"fmt","","",78],[11,"new","","",78],[11,"is_valid","","",78],[11,"is_strictly_valid","","",78],[11,"append","","",78],[11,"to_json","","",78],[11,"fmt","valico::json_schema","",93],[0,"errors","",""],[3,"WrongType","valico::json_schema::errors",""],[12,"path","","",94],[12,"detail","","",94],[3,"MultipleOf","",""],[12,"path","","",95],[3,"Maximum","",""],[12,"path","","",96],[3,"Minimum","",""],[12,"path","","",97],[3,"MaxLength","",""],[12,"path","","",98],[3,"MinLength","",""],[12,"path","","",99],[3,"Pattern","",""],[12,"path","","",100],[3,"MaxItems","",""],[12,"path","","",101],[3,"MinItems","",""],[12,"path","","",102],[3,"UniqueItems","",""],[12,"path","","",103],[3,"Items","",""],[12,"path","","",104],[12,"detail","","",104],[3,"MaxProperties","",""],[12,"path","","",105],[3,"MinProperties","",""],[12,"path","","",106],[3,"Required","",""],[12,"path","","",107],[3,"Properties","",""],[12,"path","","",108],[12,"detail","","",108],[3,"Enum","",""],[12,"path","","",109],[3,"AnyOf","",""],[12,"path","","",110],[12,"states","","",110],[3,"OneOf","",""],[12,"path","","",111],[12,"states","","",111],[3,"Not","",""],[12,"path","","",112],[3,"Format","",""],[12,"path","","",113],[12,"detail","","",113],[11,"fmt","","",94],[11,"description","","",94],[11,"fmt","","",94],[11,"get_code","","",94],[11,"get_title","","",94],[11,"get_path","","",94],[11,"get_detail","","",94],[11,"to_json","","",94],[11,"fmt","","",95],[11,"description","","",95],[11,"fmt","","",95],[11,"get_code","","",95],[11,"get_title","","",95],[11,"get_path","","",95],[11,"to_json","","",95],[11,"fmt","","",96],[11,"description","","",96],[11,"fmt","","",96],[11,"get_code","","",96],[11,"get_title","","",96],[11,"get_path","","",96],[11,"to_json","","",96],[11,"fmt","","",97],[11,"description","","",97],[11,"fmt","","",97],[11,"get_code","","",97],[11,"get_title","","",97],[11,"get_path","","",97],[11,"to_json","","",97],[11,"fmt","","",98],[11,"description","","",98],[11,"fmt","","",98],[11,"get_code","","",98],[11,"get_title","","",98],[11,"get_path","","",98],[11,"to_json","","",98],[11,"fmt","","",99],[11,"description","","",99],[11,"fmt","","",99],[11,"get_code","","",99],[11,"get_title","","",99],[11,"get_path","","",99],[11,"to_json","","",99],[11,"fmt","","",100],[11,"description","","",100],[11,"fmt","","",100],[11,"get_code","","",100],[11,"get_title","","",100],[11,"get_path","","",100],[11,"to_json","","",100],[11,"fmt","","",101],[11,"description","","",101],[11,"fmt","","",101],[11,"get_code","","",101],[11,"get_title","","",101],[11,"get_path","","",101],[11,"to_json","","",101],[11,"fmt","","",102],[11,"description","","",102],[11,"fmt","","",102],[11,"get_code","","",102],[11,"get_title","","",102],[11,"get_path","","",102],[11,"to_json","","",102],[11,"fmt","","",103],[11,"description","","",103],[11,"fmt","","",103],[11,"get_code","","",103],[11,"get_title","","",103],[11,"get_path","","",103],[11,"to_json","","",103],[11,"fmt","","",104],[11,"description","","",104],[11,"fmt","","",104],[11,"get_code","","",104],[11,"get_title","","",104],[11,"get_path","","",104],[11,"get_detail","","",104],[11,"to_json","","",104],[11,"fmt","","",105],[11,"description","","",105],[11,"fmt","","",105],[11,"get_code","","",105],[11,"get_title","","",105],[11,"get_path","","",105],[11,"to_json","","",105],[11,"fmt","","",106],[11,"description","","",106],[11,"fmt","","",106],[11,"get_code","","",106],[11,"get_title","","",106],[11,"get_path","","",106],[11,"to_json","","",106],[11,"fmt","","",107],[11,"description","","",107],[11,"fmt","","",107],[11,"get_code","","",107],[11,"get_title","","",107],[11,"get_path","","",107],[11,"to_json","","",107],[11,"fmt","","",108],[11,"description","","",108],[11,"fmt","","",108],[11,"get_code","","",108],[11,"get_title","","",108],[11,"get_path","","",108],[11,"get_detail","","",108],[11,"to_json","","",108],[11,"fmt","","",109],[11,"description","","",109],[11,"fmt","","",109],[11,"get_code","","",109],[11,"get_title","","",109],[11,"get_path","","",109],[11,"to_json","","",109],[11,"fmt","","",110],[11,"description","","",110],[11,"fmt","","",110],[11,"get_code","","",110],[11,"get_title","","",110],[11,"get_path","","",110],[11,"to_json","","",110],[11,"fmt","","",111],[11,"description","","",111],[11,"fmt","","",111],[11,"get_code","","",111],[11,"get_title","","",111],[11,"get_path","","",111],[11,"to_json","","",111],[11,"fmt","","",112],[11,"description","","",112],[11,"fmt","","",112],[11,"get_code","","",112],[11,"get_title","","",112],[11,"get_path","","",112],[11,"to_json","","",112],[11,"fmt","","",113],[11,"description","","",113],[11,"fmt","","",113],[11,"get_code","","",113],[11,"get_title","","",113],[11,"get_path","","",113],[11,"get_detail","","",113],[11,"to_json","","",113],[0,"builder","valico::json_schema",""],[3,"SchemaArray","valico::json_schema::builder",""],[3,"SchemaHash","",""],[3,"Dependencies","",""],[3,"Builder","","Builder provides simple DSL to build Schema. It allows you not to use\nstrings and raw JSON manipulation. It also prevent some kinds of spelling\nand type errors."],[4,"Dependency","",""],[13,"Schema","","",114],[13,"Property","","",114],[5,"schema","",""],[5,"schema_box","",""],[11,"new","","",115],[11,"push","","",115],[11,"new","","",116],[11,"insert","","",116],[11,"new","","",117],[11,"schema","","",117],[11,"property","","",117],[11,"build","","",117],[11,"to_json","","",117],[11,"to_json","","",114],[11,"new","","",118],[11,"id","","",118],[11,"ref_","","",118],[11,"schema","","",118],[11,"default","","",118],[11,"multiple_of","","",118],[11,"maximum","","",118],[11,"minimum","","",118],[11,"max_length","","",118],[11,"min_length","","",118],[11,"pattern","","",118],[11,"format","","",118],[11,"items_schema","","",118],[11,"items_array","","",118],[11,"additional_items","","",118],[11,"additional_items_schema","","",118],[11,"max_items","","",118],[11,"min_items","","",118],[11,"unique_items","","",118],[11,"max_properties","","",118],[11,"min_properties","","",118],[11,"required","","",118],[11,"properties","","",118],[11,"pattern_properties","","",118],[11,"additional_properties","","",118],[11,"additional_properties_schema","","",118],[11,"dependencies","","",118],[11,"enum_","","",118],[11,"array","","",118],[11,"boolean","","",118],[11,"integer","","",118],[11,"number","","",118],[11,"null","","",118],[11,"object","","",118],[11,"string","","",118],[11,"type_","","",118],[11,"types","","",118],[11,"all_of","","",118],[11,"any_of","","",118],[11,"one_of","","",118],[11,"not","","",118],[11,"build","","",118],[11,"into_json","","",118],[11,"to_json","","",118],[11,"fmt","valico::json_schema","",29],[6,"Err","",""],[11,"from_str","","",29],[11,"fmt","","",29],[8,"MutableJson","valico",""],[10,"as_object_mut","","",119],[10,"as_array_mut","","",119]],"paths":[[4,"Json"],[8,"ValicoError"],[3,"Box"],[3,"Param"],[4,"PrimitiveType"],[3,"Builder"],[3,"StringCoercer"],[3,"I64Coercer"],[3,"U64Coercer"],[3,"F64Coercer"],[3,"BooleanCoercer"],[3,"NullCoercer"],[3,"ArrayCoercer"],[3,"ObjectCoercer"],[3,"Required"],[3,"WrongType"],[3,"WrongValue"],[3,"MutuallyExclusive"],[3,"ExactlyOne"],[3,"AtLeastOne"],[3,"AllowedValues"],[3,"AtLeastOneOf"],[3,"ExactlyOneOf"],[3,"MutuallyExclusive"],[4,"Regex"],[3,"RejectedValues"],[8,"Validator"],[8,"Coercer"],[3,"ExtendedResult"],[4,"PrimitiveType"],[3,"KeywordConsumer"],[3,"MultipleOf"],[3,"Minimum"],[3,"Maximum"],[3,"MaxLength"],[3,"MinLength"],[3,"MaxItems"],[3,"MinItems"],[3,"Pattern"],[3,"UniqueItems"],[3,"Items"],[3,"MaxProperties"],[3,"MinProperties"],[3,"Required"],[3,"Properties"],[3,"Dependencies"],[3,"Enum"],[3,"Type"],[3,"AllOf"],[3,"AnyOf"],[3,"OneOf"],[3,"Ref"],[3,"Not"],[3,"Format"],[8,"Keyword"],[3,"WalkContext"],[3,"Schema"],[3,"CompilationSettings"],[4,"SchemaError"],[3,"ScopedSchema"],[3,"Scope"],[3,"MultipleOf"],[3,"Maximum"],[3,"Minimum"],[3,"MaxLength"],[3,"MinLength"],[3,"Pattern"],[3,"MaxItems"],[3,"MinItems"],[3,"MaxProperties"],[3,"MinProperties"],[3,"Required"],[3,"Enum"],[3,"AllOf"],[3,"AnyOf"],[3,"OneOf"],[3,"Ref"],[3,"Not"],[3,"ValidationState"],[3,"UniqueItems"],[3,"Items"],[4,"ItemsKind"],[4,"AdditionalKind"],[3,"Properties"],[4,"AdditionalKind"],[3,"Dependencies"],[4,"DepKind"],[3,"Type"],[4,"TypeKind"],[3,"Ipv4"],[3,"Ipv6"],[3,"Uuid"],[3,"Uri"],[8,"Validator"],[3,"WrongType"],[3,"MultipleOf"],[3,"Maximum"],[3,"Minimum"],[3,"MaxLength"],[3,"MinLength"],[3,"Pattern"],[3,"MaxItems"],[3,"MinItems"],[3,"UniqueItems"],[3,"Items"],[3,"MaxProperties"],[3,"MinProperties"],[3,"Required"],[3,"Properties"],[3,"Enum"],[3,"AnyOf"],[3,"OneOf"],[3,"Not"],[3,"Format"],[4,"Dependency"],[3,"SchemaArray"],[3,"SchemaHash"],[3,"Dependencies"],[3,"Builder"],[8,"MutableJson"]]};
searchIndex['url'] = {"items":[[0,"","url","<a href=\"https://github.com/servo/rust-url\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"../github.png\" alt=\"Fork me on GitHub\"></a>\n<style>.sidebar { margin-top: 53px }</style>"],[3,"Ipv6Address","","A 128 bit IPv6 address"],[12,"pieces","","",0],[3,"Url","","The parsed representation of an absolute URL."],[12,"scheme","","The scheme (a.k.a. protocol) of the URL, in ASCII lower case.",1],[12,"scheme_data","","The components of the URL whose representation depends on where the scheme is *relative*.",1],[12,"query","","The query string of the URL.",1],[12,"fragment","","The fragment identifier of the URL.",1],[3,"RelativeSchemeData","","Components for URLs in a *relative* scheme such as HTTP."],[12,"username","","The username of the URL, as a possibly empty, pecent-encoded string.",2],[12,"password","","The password of the URL.",2],[12,"host","","The host of the URL, either a domain name or an IPv4 address",2],[12,"port","","The port number of the URL.\n`None` for file-like schemes, or to indicate the default port number.",2],[12,"default_port","","The default port number for the URL’s scheme.\n`None` for file-like schemes.",2],[12,"path","","The path of the URL, as vector of pecent-encoded strings.",2],[3,"UrlParser","","A set of optional parameters for URL parsing."],[4,"Host","","The host name of an URL."],[13,"Domain","","A (DNS) domain name or an IPv4 address.",3],[13,"Ipv6","","An IPv6 address, represented inside `[...]` square brackets\nso that `:` colon characters in the address are not ambiguous\nwith the port number delimiter.",3],[4,"ParseError","","Errors that can occur during parsing."],[13,"EmptyHost","","",4],[13,"InvalidScheme","","",4],[13,"InvalidPort","","",4],[13,"InvalidIpv6Address","","",4],[13,"InvalidDomainCharacter","","",4],[13,"InvalidCharacter","","",4],[13,"InvalidBackslash","","",4],[13,"InvalidPercentEncoded","","",4],[13,"InvalidAtSymbolInUser","","",4],[13,"ExpectedTwoSlashes","","",4],[13,"ExpectedInitialSlash","","",4],[13,"NonUrlCodePoint","","",4],[13,"RelativeUrlWithScheme","","",4],[13,"RelativeUrlWithoutBase","","",4],[13,"RelativeUrlWithNonRelativeBase","","",4],[13,"NonAsciiDomainsNotSupportedYet","","",4],[13,"CannotSetJavascriptFragment","","",4],[13,"CannotSetPortWithFileLikeScheme","","",4],[13,"CannotSetUsernameWithNonRelativeScheme","","",4],[13,"CannotSetPasswordWithNonRelativeScheme","","",4],[13,"CannotSetHostPortWithNonRelativeScheme","","",4],[13,"CannotSetHostWithNonRelativeScheme","","",4],[13,"CannotSetPortWithNonRelativeScheme","","",4],[13,"CannotSetPathWithNonRelativeScheme","","",4],[4,"SchemeData","","The components of the URL whose representation depends on where the scheme is *relative*."],[13,"Relative","","Components for URLs in a *relative* scheme such as HTTP.",5],[13,"NonRelative","","No further structure is assumed for *non-relative* schemes such as `data` and `mailto`.",5],[4,"SchemeType","","Determines the behavior of the URL parser for a given scheme."],[13,"NonRelative","","Indicate that the scheme is *non-relative*.",6],[13,"Relative","","Indicate that the scheme is *relative*, and what the default port number is.",6],[13,"FileLike","","Indicate a *relative* scheme similar to the *file* scheme.",6],[5,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier."],[5,"whatwg_scheme_type_mapper","","http://url.spec.whatwg.org/#relative-scheme"],[11,"fmt","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"clone","","",0],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3],[11,"serialize","","Serialize the host as a string.",3],[11,"fmt","","",3],[11,"parse","","Parse an IPv6 address, without the [] square brackets.",0],[11,"serialize","","Serialize the IPv6 address to a string.",0],[11,"fmt","","",0],[11,"fmt","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"description","","",4],[11,"fmt","","",4],[0,"urlutils","","These methods are not meant for use in Rust code,\nonly to help implement the JavaScript URLUtils API: http://url.spec.whatwg.org/#urlutils"],[3,"UrlUtilsWrapper","url::urlutils",""],[12,"url","","",7],[12,"parser","","",7],[0,"percent_encoding","url",""],[3,"EncodeSet","url::percent_encoding","Represents a set of characters / bytes that should be percent-encoded."],[5,"percent_encode_to","","Percent-encode the given bytes, and push the result to `output`."],[5,"percent_encode","","Percent-encode the given bytes."],[5,"utf8_percent_encode_to","","Percent-encode the UTF-8 encoding of the given string, and push the result to `output`."],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string."],[5,"percent_decode_to","","Percent-decode the given bytes, and push the result to `output`."],[5,"percent_decode","","Percent-decode the given bytes."],[5,"lossy_utf8_percent_decode","","Percent-decode the given bytes, and decode the result as UTF-8."],[5,"from_hex","",""],[7,"SIMPLE_ENCODE_SET","","This encode set is used for fragment identifier and non-relative scheme data."],[7,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings."],[7,"DEFAULT_ENCODE_SET","","This encode set is used for path components."],[7,"USERINFO_ENCODE_SET","","This encode set is used in the URL parser for usernames and passwords."],[7,"PASSWORD_ENCODE_SET","","This encode set should be used when setting the password field of a parsed URL."],[7,"USERNAME_ENCODE_SET","","This encode set should be used when setting the username field of a parsed URL."],[7,"FORM_URLENCODED_ENCODE_SET","","This encode set is used in `application/x-www-form-urlencoded` serialization."],[0,"form_urlencoded","url","Parser and serializer for the [`application/x-www-form-urlencoded` format](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms."],[5,"parse","url::form_urlencoded","Convert a byte string in the `application/x-www-form-urlencoded` format\ninto a vector of (name, value) pairs."],[5,"serialize_owned","","Convert a slice of owned (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[5,"serialize","","Convert an iterator of (name, value) pairs\ninto a string in the `application/x-www-form-urlencoded` format."],[0,"punycode","url","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation."],[5,"decode_to_string","url::punycode","Convert Punycode to an Unicode `String`."],[5,"decode","","Convert Punycode to Unicode."],[5,"encode_str","","Convert an Unicode `str` to Punycode."],[5,"encode","","Convert Unicode to Punycode."],[0,"format","url","Formatting utilities for URLs."],[3,"PathFormatter","url::format","Formatter and serializer for URL path data."],[12,"path","","The path as a slice of string-like objects (String or &str).",8],[3,"UserInfoFormatter","","Formatter and serializer for URL username and password data."],[12,"username","","URL username as a string slice.",9],[12,"password","","URL password as an optional string slice.",9],[3,"UrlNoFragmentFormatter","","Formatter for URLs which ignores the fragment field."],[12,"url","","",10],[11,"fmt","","",8],[11,"fmt","","",9],[11,"fmt","","",10],[6,"ErrorHandler","url","This is called on non-fatal parse errors."],[6,"ParseResult","",""],[8,"ToUrlPath","",""],[10,"to_url_path","","",11],[8,"FromUrlPath","",""],[10,"from_url_path","","",12],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",5],[11,"clone","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"hash","","",1],[11,"new","","Return a new UrlParser with default parameters.",13],[11,"base_url","","Set the base URL used for resolving relative URL references, and return the `UrlParser`.\nThe default is no base URL, so that relative URLs references fail to parse.",13],[11,"error_handler","","Set an error handler for non-fatal parse errors, and return the `UrlParser`.",13],[11,"scheme_type_mapper","","Set a *scheme type mapper*, and return the `UrlParser`.",13],[11,"parse","","Parse `input` as an URL, with all the parameters previously set in the `UrlParser`.",13],[11,"parse_path","","Parse `input` as a “standalone” URL path,\nwith an optional query string and fragment identifier.",13],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"default_port","","",6],[11,"same_as","","",6],[11,"parse","","Parse an URL with the default `UrlParser` parameters.",1],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",1],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",1],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",1],[11,"serialize","","Return the serialization of this URL as a string.",1],[11,"serialize_no_fragment","","Return the serialization of this URL, without the fragment identifier, as a string",1],[11,"non_relative_scheme_data","","If the URL is *non-relative*, return the string scheme data.",1],[11,"non_relative_scheme_data_mut","","If the URL is *non-relative*, return a mutable reference to the string scheme data.",1],[11,"relative_scheme_data","","If the URL is in a *relative scheme*, return the structured scheme data.",1],[11,"relative_scheme_data_mut","","If the URL is in a *relative scheme*,\nreturn a mutable reference to the structured scheme data.",1],[11,"username","","If the URL is in a *relative scheme*, return its username.",1],[11,"username_mut","","If the URL is in a *relative scheme*, return a mutable reference to its username.",1],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username, if any.",1],[11,"password","","If the URL is in a *relative scheme*, return its password, if any.",1],[11,"password_mut","","If the URL is in a *relative scheme*, return a mutable reference to its password, if any.",1],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",1],[11,"serialize_userinfo","","Serialize the URL's username and password, if any.",1],[11,"host","","If the URL is in a *relative scheme*, return its structured host.",1],[11,"host_mut","","If the URL is in a *relative scheme*, return a mutable reference to its structured host.",1],[11,"domain","","If the URL is in a *relative scheme* and its host is a domain,\nreturn the domain as a string.",1],[11,"domain_mut","","If the URL is in a *relative scheme* and its host is a domain,\nreturn a mutable reference to the domain string.",1],[11,"serialize_host","","If the URL is in a *relative scheme*, serialize its host as a string.",1],[11,"port","","If the URL is in a *relative scheme* and has a port number, return it.",1],[11,"port_mut","","If the URL is in a *relative scheme*, return a mutable reference to its port.",1],[11,"port_or_default","","If the URL is in a *relative scheme* that is not a file-like,\nreturn its port number, even if it is the default.",1],[11,"path","","If the URL is in a *relative scheme*, return its path components.",1],[11,"path_mut","","If the URL is in a *relative scheme*, return a mutable reference to its path components.",1],[11,"serialize_path","","If the URL is in a *relative scheme*, serialize its path as a string.",1],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return a vector of (key, value) pairs.",1],[11,"set_query_from_pairs","","Serialize an iterator of (key, value) pairs as `application/x-www-form-urlencoded`\nand set it as the URL’s query string.",1],[11,"lossy_percent_decode_query","","Percent-decode the URL’s query string, if any.",1],[11,"lossy_percent_decode_fragment","","Percent-decode the URL’s fragment identifier, if any.",1],[11,"encode","","",1],[11,"decode","","",1],[11,"fmt","","",1],[11,"fmt","","",5],[11,"lossy_percent_decode_username","","Percent-decode the URL’s username.",2],[11,"lossy_percent_decode_password","","Percent-decode the URL’s password, if any.",2],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",2],[11,"domain","","If the host is a domain, return the domain as a string.",2],[11,"domain_mut","","If the host is a domain, return a mutable reference to the domain string.",2],[11,"port_or_default","","Return the port number of the URL, even if it is the default.\nReturn `None` for file-like URLs.",2],[11,"serialize_path","","Serialize the path as a string.",2],[11,"serialize_userinfo","","Serialize the userinfo as a string.",2],[11,"fmt","","",2],[11,"to_url_path","std::path","",14],[11,"to_url_path","std::old_path::posix","",15],[11,"to_url_path","std::old_path::windows","",16],[11,"from_url_path","std::path","",17],[11,"from_url_path","std::old_path::posix","",15],[11,"from_url_path","std::old_path::windows","",16]],"paths":[[3,"Ipv6Address"],[3,"Url"],[3,"RelativeSchemeData"],[4,"Host"],[4,"ParseError"],[4,"SchemeData"],[4,"SchemeType"],[3,"UrlUtilsWrapper"],[3,"PathFormatter"],[3,"UserInfoFormatter"],[3,"UrlNoFragmentFormatter"],[8,"ToUrlPath"],[8,"FromUrlPath"],[3,"UrlParser"],[3,"Path"],[3,"Path"],[3,"Path"],[3,"PathBuf"]]};
searchIndex['regex_macros'] = {"items":[[0,"","regex_macros","This crate provides the `regex!` macro. Its use is documented in the\n`regex` crate."]],"paths":[]};
searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs"],[3,"Uuid","","A Universally Unique Identifier (UUID)"],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm"],[13,"Mac","","Version 1: MAC address",0],[13,"Dce","","Version 2: DCE Security",0],[13,"Md5","","Version 3: MD5 hash",0],[13,"Random","","Version 4: Random",0],[13,"Sha1","","Version 5: SHA-1 hash",0],[4,"UuidVariant","","The reserved variants of UUIDs"],[13,"NCS","","Reserved by the NCS for backward compatibility",1],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1],[13,"Future","","Reserved for future expansion",1],[4,"ParseError","","Error details for string parsing failures"],[13,"InvalidLength","","",2],[13,"InvalidCharacter","","",2],[13,"InvalidGroups","","",2],[13,"InvalidGroupLength","","",2],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID"],[11,"eq","","",0],[11,"ne","","",0],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",3],[11,"hash","","",3],[11,"fmt","","",2],[11,"fmt","","",2],[11,"nil","","Returns a nil or empty UUID (containing all zeroes)",3],[11,"new","","Create a new UUID of the specified version",3],[11,"new_v4","","Creates a new random UUID",3],[11,"from_fields","","Creates a UUID using the supplied field values",3],[11,"from_bytes","","Creates a UUID using the supplied bytes",3],[11,"get_variant","","Returns the variant of the UUID structure",3],[11,"get_version_num","","Returns the version number of the UUID",3],[11,"get_version","","Returns the version of the UUID",3],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3],[11,"to_simple_string","","Returns the UUID as a string of 16 hexadecimal digits",3],[11,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3],[11,"to_urn_string","","Returns the UUID formatted as a full URN string",3],[11,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3],[11,"is_nil","","Tests if the UUID is nil",3],[11,"default","","Returns the nil UUID, which is all zeroes",3],[11,"clone","","Returns a copy of the UUID",3],[6,"Err","",""],[11,"from_str","","Parse a hex string and interpret as a UUID",3],[11,"fmt","","",3],[11,"eq","","",3],[11,"encode","","Encode a UUID as a hyphenated string",3],[11,"decode","","Decode a UUID from a string",3],[11,"rand","","",3]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"]]};
searchIndex['jsonway'] = {"items":[[0,"","jsonway",""],[5,"array","","```rust\nlet json = jsonway::object(|json| {\n    json.set(\"first_name\", \"Luke\".to_string()); \n    json.set(\"last_name\", \"Skywalker\".to_string());"],[5,"object","","Create and return new ObjectBuilder"],[0,"array_builder","",""],[3,"ArrayBuilder","jsonway::array_builder",""],[12,"array","","",0],[12,"null","","",0],[12,"skip","","",0],[12,"root","","",0],[11,"new","","",0],[11,"from_json","","Initialize builder with initial value.",0],[11,"build","","Create new ArrayBuilder, pass it to closure as mutable ref and return.",0],[11,"push_json","","Push JSON value to array.",0],[11,"array","","Create new array and push it.",0],[11,"object","","Create new object and push it",0],[11,"null","","It you call `null`, this array will be converted to null when converting\nto raw JSON value.",0],[11,"skip","","It you call `skip`, this array will be skipped.",0],[11,"root","","",0],[11,"has_root","","",0],[11,"unwrap","","Move out internal JSON value.",0],[11,"push","","Push to array something that can be converted to JSON.",0],[11,"objects","","Fill this array by objects builded from iterator.",0],[11,"arrays","","",0],[11,"map","","Fill this array by JSON values builded from iterator.",0],[11,"to_json","","Copy self to new JSON instance.",0],[0,"object_builder","jsonway",""],[3,"ObjectBuilder","jsonway::object_builder",""],[12,"object","","",1],[12,"null","","",1],[12,"skip","","",1],[12,"root","","",1],[11,"new","","",1],[11,"from_json","","Initialize builder with initial value.",1],[11,"build","","Create new builder, pass it to closure as mutable ref and return.",1],[11,"null","","It you call `null`, this object will be converted to null.",1],[11,"skip","","It you call `skip`, this object will be skipped.",1],[11,"root","","",1],[11,"has_root","","",1],[11,"unwrap","","Move out internal JSON value.",1],[11,"set","","Set object's `name` field with something that can be\nconverted to json::Json value.",1],[11,"call","","Stub for future use",1],[11,"set_json","","Set object's `name` field with raw json::Json value.",1],[11,"array","","Build new array and set object's `name` field with it.",1],[11,"object","","Build new object and set object's `name` field with it.",1],[11,"to_json","","Copy self to new JSON instance.",1],[0,"mutable_json","jsonway",""],[8,"MutableJson","jsonway::mutable_json",""],[10,"as_object_mut","","",2],[10,"as_array_mut","","",2],[11,"as_object_mut","rustc-serialize::json","If the Json value is an json::Object, returns the associated BTreeMap.\nReturns None otherwise.",3],[11,"as_array_mut","","",3],[0,"serializer","jsonway",""],[8,"Serializer","jsonway::serializer","Provides functionality to create custom JSON presenters for your structs.\n \n## Example \n \n```\nuse jsonway::{self, Serializer};"],[10,"build","","",4],[11,"root","","",4],[11,"serialize","","",4],[8,"ObjectSerializer","","Provides functionality to create custom JSON presenters for your structs.\n \n## Example \n \n```\nuse jsonway::{self, ObjectSerializer};"],[10,"build","","",5],[11,"root","","",5],[11,"serialize","","",5],[8,"ObjectScopeSerializer","","Provides functionality to create custom JSON presenters for your structs.\n \n## Example \n \n```rust\nuse jsonway::{self, ObjectScopeSerializer};\n \nstruct User {\n    id: u64,\n    is_admin: bool\n}\n \nstruct Jedi {\n    name: String,\n    secret: String\n}\n \nstruct JediSerializer;\n \nimpl jsonway::ObjectScopeSerializer<Jedi, User> for JediSerializer {\n    fn root(&self) -> Option<&str> { Some(\"jedi\") }\n    fn build(&self, jedi: &Jedi, current_user: &User, json: &mut jsonway::ObjectBuilder) {\n        json.set(\"name\", jedi.name.to_string());\n \n        if current_user.is_admin {\n            json.set(\"secret\", jedi.secret.to_string());\n        }\n    }\n}\n \nlet jedi = Jedi { \n    name: \"Palpatine\".to_string(), \n    secret: \"Dark side\".to_string() \n};"],[10,"build","","",6],[11,"root","","",6],[11,"serialize","","",6],[0,"array_serializer","jsonway",""],[8,"ArraySerializer","jsonway::array_serializer",""],[10,"build","","",7],[11,"root","","",7],[11,"meta","","",7],[11,"serialize","","",7]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[8,"MutableJson"],[4,"Json"],[8,"Serializer"],[8,"ObjectSerializer"],[8,"ObjectScopeSerializer"],[8,"ArraySerializer"]]};
searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","core::cell","",9],[11,"decode","","",9],[11,"encode","","",10],[11,"decode","","",10],[11,"encode","alloc::arc","",11],[11,"decode","","",11],[11,"encode","collections::linked_list","",12],[11,"decode","","",12],[11,"encode","collections::vec_deque","",13],[11,"decode","","",13],[11,"encode","collections::btree::map","",14],[11,"decode","","",14],[11,"encode","collections::btree::set","",15],[11,"decode","","",15],[11,"encode","std::collections::hash::map","",16],[11,"decode","","",16],[11,"encode","std::collections::hash::set","",17],[11,"decode","","",17],[11,"encode","collections::vec_map","",18],[11,"decode","","",18],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[3,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[12,"char_set","","Character set to use",19],[12,"newline","","Newline to use",19],[12,"pad","","True to pad output with `=` characters",19],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",19],[4,"CharacterSet","","Available encoding character sets"],[13,"Standard","","The standard character set (uses `+` and `/`)",20],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",20],[4,"Newline","","Available newline types"],[13,"LF","","A linefeed (i.e. Unix-style newline)",21],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",21],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",22],[13,"InvalidBase64Length","","The input had an invalid length",22],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[8,"ToBase64","","A trait for converting a value to base64 encoding."],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",23],[8,"FromBase64","","A trait for converting from base64 encoded values."],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",24],[11,"fmt","","",22],[11,"description","","",22],[11,"fmt","","",22],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[4,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",25],[13,"InvalidHexLength","","The input had an invalid length",25],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",26],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",27],[11,"fmt","","",25],[11,"description","","",25],[11,"fmt","","",25],[0,"json","rustc-serialize","JSON parsing and serialization"],[3,"PrettyJson","rustc-serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",28],[13,"U64","","",28],[13,"F64","","",28],[13,"String","","",28],[13,"Boolean","","",28],[13,"Array","","",28],[13,"Object","","",28],[13,"Null","","",28],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",29],[13,"InvalidNumber","","",29],[13,"EOFWhileParsingObject","","",29],[13,"EOFWhileParsingArray","","",29],[13,"EOFWhileParsingValue","","",29],[13,"EOFWhileParsingString","","",29],[13,"KeyMustBeAString","","",29],[13,"ExpectedColon","","",29],[13,"TrailingCharacters","","",29],[13,"TrailingComma","","",29],[13,"InvalidEscape","","",29],[13,"InvalidUnicodeCodePoint","","",29],[13,"LoneLeadingSurrogateInHexEscape","","",29],[13,"UnexpectedEndOfHexEscape","","",29],[13,"UnrecognizedHex","","",29],[13,"NotFourDigit","","",29],[13,"NotUtf8","","",29],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",30],[13,"IoError","","",30],[4,"DecoderError","",""],[13,"ParseError","","",31],[13,"ExpectedError","","",31],[13,"MissingFieldError","","",31],[13,"UnknownVariantError","","",31],[13,"ApplicationError","","",31],[13,"EOF","","",31],[4,"EncoderError","",""],[13,"FmtError","","",32],[13,"BadHashmapKey","","",32],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",33],[13,"ObjectEnd","","",33],[13,"ArrayStart","","",33],[13,"ArrayEnd","","",33],[13,"BooleanValue","","",33],[13,"I64Value","","",33],[13,"U64Value","","",33],[13,"F64Value","","",33],[13,"StringValue","","",33],[13,"NullValue","","",33],[13,"Error","","",33],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",34],[13,"Key","","",34],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",35],[11,"fmt","","",28],[11,"partial_cmp","","",28],[11,"lt","","",28],[11,"le","","",28],[11,"gt","","",28],[11,"ge","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"fmt","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"fmt","","",32],[11,"fmt","","",29],[11,"description","","",31],[11,"cause","","",31],[11,"fmt","","",31],[11,"description","","",30],[11,"fmt","","",30],[11,"description","","",32],[11,"fmt","","",32],[11,"from_error","","",32],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",36],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",36],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",36],[6,"Error","",""],[11,"emit_nil","","",36],[11,"emit_usize","","",36],[11,"emit_u64","","",36],[11,"emit_u32","","",36],[11,"emit_u16","","",36],[11,"emit_u8","","",36],[11,"emit_isize","","",36],[11,"emit_i64","","",36],[11,"emit_i32","","",36],[11,"emit_i16","","",36],[11,"emit_i8","","",36],[11,"emit_bool","","",36],[11,"emit_f64","","",36],[11,"emit_f32","","",36],[11,"emit_char","","",36],[11,"emit_str","","",36],[11,"emit_enum","","",36],[11,"emit_enum_variant","","",36],[11,"emit_enum_variant_arg","","",36],[11,"emit_enum_struct_variant","","",36],[11,"emit_enum_struct_variant_field","","",36],[11,"emit_struct","","",36],[11,"emit_struct_field","","",36],[11,"emit_tuple","","",36],[11,"emit_tuple_arg","","",36],[11,"emit_tuple_struct","","",36],[11,"emit_tuple_struct_arg","","",36],[11,"emit_option","","",36],[11,"emit_option_none","","",36],[11,"emit_option_some","","",36],[11,"emit_seq","","",36],[11,"emit_seq_elt","","",36],[11,"emit_map","","",36],[11,"emit_map_elt_key","","",36],[11,"emit_map_elt_val","","",36],[11,"encode","","",28],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",28],[11,"from_str","","Decodes a json value from a string",28],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",28],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",28],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",28],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",28],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",28],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",28],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",28],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",28],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",28],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",28],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",28],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",28],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",28],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",28],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",28],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",28],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",28],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",28],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",28],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",28],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",28],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",28],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",28],[6,"Output","",""],[11,"index","","",28],[6,"Output","",""],[11,"index","","",28],[11,"fmt","","",33],[11,"clone","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"fmt","","",34],[11,"clone","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"new","","",37],[11,"len","","Returns The number of elements in the Stack.",37],[11,"is_empty","","Returns true if the stack is empty.",37],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",37],[11,"is_equal_to","","Compares this stack with an array of StackElements.",37],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",37],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",37],[11,"top","","Returns the top-most element (if any).",37],[6,"Item","",""],[11,"next","","",38],[11,"new","","Creates the JSON parser.",38],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",38],[11,"new","","Create a JSON Builder.",39],[11,"build","","",39],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",40],[6,"Error","",""],[11,"read_nil","","",40],[11,"read_usize","","",40],[11,"read_u8","","",40],[11,"read_u16","","",40],[11,"read_u32","","",40],[11,"read_u64","","",40],[11,"read_isize","","",40],[11,"read_i8","","",40],[11,"read_i16","","",40],[11,"read_i32","","",40],[11,"read_i64","","",40],[11,"read_f32","","",40],[11,"read_f64","","",40],[11,"read_bool","","",40],[11,"read_char","","",40],[11,"read_str","","",40],[11,"read_enum","","",40],[11,"read_enum_variant","","",40],[11,"read_enum_variant_arg","","",40],[11,"read_enum_struct_variant","","",40],[11,"read_enum_struct_variant_field","","",40],[11,"read_struct","","",40],[11,"read_struct_field","","",40],[11,"read_tuple","","",40],[11,"read_tuple_arg","","",40],[11,"read_tuple_struct","","",40],[11,"read_tuple_struct_arg","","",40],[11,"read_option","","",40],[11,"read_seq","","",40],[11,"read_seq_elt","","",40],[11,"read_map","","",40],[11,"read_map_elt_key","","",40],[11,"read_map_elt_val","","",40],[11,"error","","",40],[11,"to_json","","",28],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",14],[11,"to_json","std::collections::hash::map","",16],[11,"to_json","core::option","",4],[11,"fmt","rustc-serialize::json","Encodes a json value into a string",28],[11,"fmt","","Encodes a json value into a string",41],[11,"fmt","","Encodes a json value into a string",42],[11,"indent","","Set the indentation level for the emitted JSON",43],[11,"fmt","","Encodes a json value into a string",43],[6,"Err","",""],[11,"from_str","","",28],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::old_path::posix","",5],[11,"decode","","",5],[11,"encode","std::old_path::windows","",6],[11,"decode","","",6],[11,"encode","std::path","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","core::cell","",9],[11,"decode","","",9],[11,"encode","","",10],[11,"decode","","",10],[11,"encode","alloc::arc","",11],[11,"decode","","",11],[8,"Decoder","rustc-serialize",""],[16,"Error","rustc-serialize::Decoder",""],[10,"read_nil","rustc-serialize","",44],[10,"read_usize","","",44],[10,"read_u64","","",44],[10,"read_u32","","",44],[10,"read_u16","","",44],[10,"read_u8","","",44],[10,"read_isize","","",44],[10,"read_i64","","",44],[10,"read_i32","","",44],[10,"read_i16","","",44],[10,"read_i8","","",44],[10,"read_bool","","",44],[10,"read_f64","","",44],[10,"read_f32","","",44],[10,"read_char","","",44],[10,"read_str","","",44],[10,"read_enum","","",44],[10,"read_enum_variant","","",44],[10,"read_enum_variant_arg","","",44],[10,"read_enum_struct_variant","","",44],[10,"read_enum_struct_variant_field","","",44],[10,"read_struct","","",44],[10,"read_struct_field","","",44],[10,"read_tuple","","",44],[10,"read_tuple_arg","","",44],[10,"read_tuple_struct","","",44],[10,"read_tuple_struct_arg","","",44],[10,"read_option","","",44],[10,"read_seq","","",44],[10,"read_seq_elt","","",44],[10,"read_map","","",44],[10,"read_map_elt_key","","",44],[10,"read_map_elt_val","","",44],[10,"error","","",44],[8,"Encoder","",""],[16,"Error","rustc-serialize::Encoder",""],[10,"emit_nil","rustc-serialize","",45],[10,"emit_usize","","",45],[10,"emit_u64","","",45],[10,"emit_u32","","",45],[10,"emit_u16","","",45],[10,"emit_u8","","",45],[10,"emit_isize","","",45],[10,"emit_i64","","",45],[10,"emit_i32","","",45],[10,"emit_i16","","",45],[10,"emit_i8","","",45],[10,"emit_bool","","",45],[10,"emit_f64","","",45],[10,"emit_f32","","",45],[10,"emit_char","","",45],[10,"emit_str","","",45],[10,"emit_enum","","",45],[10,"emit_enum_variant","","",45],[10,"emit_enum_variant_arg","","",45],[10,"emit_enum_struct_variant","","",45],[10,"emit_enum_struct_variant_field","","",45],[10,"emit_struct","","",45],[10,"emit_struct_field","","",45],[10,"emit_tuple","","",45],[10,"emit_tuple_arg","","",45],[10,"emit_tuple_struct","","",45],[10,"emit_tuple_struct_arg","","",45],[10,"emit_option","","",45],[10,"emit_option_none","","",45],[10,"emit_option_some","","",45],[10,"emit_seq","","",45],[10,"emit_seq_elt","","",45],[10,"emit_map","","",45],[10,"emit_map_elt_key","","",45],[10,"emit_map_elt_val","","",45],[8,"Decodable","",""],[10,"decode","","",46],[8,"Encodable","",""],[10,"encode","","",47],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",48],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",49]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['phf_macros'] = {"items":[[0,"","phf_macros","Compiler plugin defining macros that create PHF data structures."],[0,"util","",""],[3,"Entry","phf_macros::util",""],[12,"key_contents","","",0],[12,"key","","",0],[12,"value","","",0],[4,"Key","",""],[13,"Str","","",1],[13,"Binary","","",1],[13,"Char","","",1],[13,"U8","","",1],[13,"I8","","",1],[13,"U16","","",1],[13,"I16","","",1],[13,"U32","","",1],[13,"I32","","",1],[13,"U64","","",1],[13,"I64","","",1],[13,"Bool","","",1],[5,"create_map","",""],[5,"create_set","",""],[5,"create_ordered_map","",""],[5,"create_ordered_set","",""],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"hash","","",1],[11,"phf_hash","","",1],[11,"phf_hash","","",0],[14,"phf_map!","phf_macros","Constructs a `phf::Map` at compile time."],[14,"phf_set!","","Constructs a `phf::Set` at compile time."],[14,"phf_ordered_map!","","Constructs a `phf::OrderedMap` at compile time."],[14,"phf_ordered_set!","","Constructs a `phf::OrderedSet` at compile time."]],"paths":[[3,"Entry"],[4,"Key"]]};
searchIndex['phf_generator'] = {"items":[[0,"","phf_generator",""],[3,"HashState","",""],[12,"key","","",0],[12,"disps","","",0],[12,"map","","",0],[5,"generate_hash","",""]],"paths":[[3,"HashState"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation"],[3,"OsRng","","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"Generator","","Iterator which will generate a stream of random items."],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"distributions","","Sampling from random distributions."],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",0],[12,"item","","The actual item which is being weighted",0],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2],[11,"sample","","",2],[11,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[11,"sample","","",3],[11,"ind_sample","","",3],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4],[11,"sample","","",4],[11,"ind_sample","","",4],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5],[11,"sample","","",5],[11,"ind_sample","","",5],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6],[11,"sample","","",6],[11,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[11,"rand","","",7],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8],[11,"sample","","",8],[11,"ind_sample","","",8],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9],[11,"sample","","",9],[11,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[11,"rand","","",10],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11],[11,"sample","","",11],[11,"ind_sample","","",11],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",13],[11,"sample","","",14],[11,"ind_sample","","",14],[11,"new","","",14],[11,"new","","Create a new `WeightedChoice`.",15],[11,"sample","","",15],[11,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[11,"clone","","",16],[11,"next_u32","","",16],[11,"reseed","","",16],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[11,"rand","","",16],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[11,"clone","","",17],[11,"next_u32","","",17],[11,"next_u64","","",17],[11,"reseed","","",17],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[11,"rand","","",17],[0,"chacha","rand","The ChaCha random number generator."],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1]."],[11,"clone","","",18],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18],[11,"next_u32","","",18],[11,"reseed","","",18],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18],[11,"rand","","",18],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",20],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19],[11,"next_u32","","",19],[11,"next_u64","","",19],[11,"fill_bytes","","",19],[11,"reseed","","",19],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19],[11,"reseed","","",21],[11,"default","","",21],[11,"rand","rand","",22],[11,"rand","","",23],[11,"rand","","",22],[11,"rand","","",23],[11,"rand","core::option","",24],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",25],[11,"next_u32","","",25],[11,"next_u64","","",25],[11,"fill_bytes","","",25],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",26],[11,"next_u32","","",26],[11,"next_u64","","",26],[11,"fill_bytes","","",26],[8,"Rand","rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",28],[11,"next_u64","","Return the next random u64.",28],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28],[11,"fill_bytes","","Fill `dest` with random data.",28],[11,"gen","","Return a random value of a `Rand` type.",28],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28],[11,"choose","","Return a random element from `values`.",28],[11,"shuffle","","Shuffle a mutable slice in place.",28],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",29],[10,"from_seed","","Create a new RNG with the given seed.",29],[6,"Item","",""],[11,"next","","",30],[6,"Item","",""],[11,"next","","",31],[11,"clone","","",32],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",32],[11,"next_u32","","",32],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",32],[11,"rand","","",32],[11,"clone","","",33],[11,"new","","Create a randomly seeded instance of `StdRng`.",33],[11,"next_u32","","",33],[11,"next_u64","","",33],[11,"reseed","","",33],[11,"from_seed","","",33],[11,"clone","","",34],[11,"next_u32","","",34],[11,"next_u64","","",34],[11,"fill_bytes","","",34]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReaderRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down."],[3,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression."],[12,"pos","","The *approximate* character index of where the error occurred.",0],[12,"msg","","A message describing the error.",0],[3,"Captures","","Captures represents a group of captured strings for a single match."],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression."],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression."],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression."],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string."],[3,"NoExpand","","NoExpand indicates literal string replacement."],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match."],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match."],[4,"Regex","","A compiled regular expression"],[5,"quote","","Escapes all regular expression meta characters in `text`."],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given."],[11,"fmt","","",0],[11,"fmt","","",0],[11,"clone","","",1],[11,"fmt","","Shows the original regular expression.",1],[11,"fmt","","Shows the original regular expression.",1],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1],[11,"is_match","","Returns true if and only if the regex matches the string given.",1],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1],[11,"as_str","","Returns the original string of this regex.",1],[11,"reg_replace","","",2],[11,"next","","",3],[11,"next","","",4],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",5],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5],[11,"len","","Returns the number of captured groups.",5],[11,"is_empty","","Returns if there are no captured groups.",5],[11,"next","","",6],[11,"next","","",7],[11,"next","","",8],[11,"next","","",9],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string."],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",10]],"paths":[[3,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex['phf'] = {"items":[[0,"","phf","Compile time optimized maps and sets."],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures"],[10,"phf_hash","","Hashes the value of `self`, factoring in a seed",0],[3,"Map","","An immutable map constructed at compile time."],[3,"Set","","An immutable set constructed at compile time."],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time."],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time."],[0,"map","","An immutable map constructed at compile time."],[3,"Map","phf::map","An immutable map constructed at compile time."],[3,"Entries","","An iterator over the key/value pairs in a `Map`."],[3,"Keys","","An iterator over the keys in a `Map`."],[3,"Values","","An iterator over the values in a `Map`."],[11,"fmt","","",1],[6,"Output","",""],[11,"index","","",1],[11,"is_empty","","Returns true if the `Map` is empty.",1],[11,"len","","Returns the number of entries in the `Map`.",1],[11,"contains_key","","Determines if `key` is in the `Map`.",1],[11,"get","","Returns a reference to the value that `key` maps to.",1],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",1],[11,"get_entry","","Like `get`, but returns both the key and the value.",1],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1],[11,"keys","","Returns an iterator over the keys in the map.",1],[11,"values","","Returns an iterator over the values in the map.",1],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",2],[11,"size_hint","","",2],[11,"next_back","","",2],[6,"Item","",""],[11,"next","","",3],[11,"size_hint","","",3],[11,"next_back","","",3],[6,"Item","",""],[11,"next","","",4],[11,"size_hint","","",4],[11,"next_back","","",4],[0,"set","phf","An immutable set constructed at compile time."],[3,"Set","phf::set","An immutable set constructed at compile time."],[3,"Iter","","An iterator over the values in a `Set`."],[11,"fmt","","",5],[11,"len","","Returns the number of elements in the `Set`.",5],[11,"is_empty","","Returns true if the `Set` contains no elements.",5],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",5],[11,"contains","","Returns true if `value` is in the `Set`.",5],[11,"iter","","Returns an iterator over the values in the set.",5],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",6],[11,"size_hint","","",6],[11,"next_back","","",6],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time."],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time."],[3,"Entries","","An iterator over the entries in a `OrderedMap`."],[3,"Keys","","An iterator over the keys in a `OrderedMap`."],[3,"Values","","An iterator over the values in a `OrderedMap`."],[11,"fmt","","",7],[6,"Output","",""],[11,"index","","",7],[11,"len","","Returns the number of entries in the `Map`.",7],[11,"is_empty","","Returns true if the `Map` is empty.",7],[11,"get","","Returns a reference to the value that `key` maps to.",7],[11,"get_key","","Returns a reference to the map's internal static instance of the given\nkey.",7],[11,"contains_key","","Determines if `key` is in the `Map`.",7],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered map.",7],[11,"get_entry","","Like `get`, but returns both the key and the value.",7],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7],[11,"keys","","Returns an iterator over the keys in the map.",7],[11,"values","","Returns an iterator over the values in the map.",7],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[11,"indexable","","",8],[11,"idx","","",8],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[11,"indexable","","",9],[11,"idx","","",9],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"indexable","","",10],[11,"idx","","",10],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time."],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time."],[3,"Iter","","An iterator over the values in a `OrderedSet`."],[11,"fmt","","",11],[11,"len","","Returns the number of elements in the `OrderedSet`.",11],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11],[11,"get_key","","Returns a reference to the set's internal static instance of the given\nkey.",11],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered set.",11],[11,"contains","","Returns true if `value` is in the `Set`.",11],[11,"iter","","Returns an iterator over the values in the set.",11],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11],[6,"Item","",""],[6,"IntoIter","",""],[6,"Item","",""],[11,"next","","",12],[11,"size_hint","","",12],[11,"next_back","","",12],[11,"indexable","","",12],[11,"idx","","",12]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex['log'] = {"items":[[0,"","log","A lightweight logging facade."],[3,"LogRecord","","The \"payload\" of a log message."],[3,"LogLocation","","The location of a log message."],[12,"module_path","","The module path of the message.",0],[12,"file","","The source file containing the message.",0],[12,"line","","The line containing the message.",0],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter."],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called."],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework"],[13,"Error","","The \"error\" level.",1],[13,"Warn","","The \"warn\" level.",1],[13,"Info","","The \"info\" level.",1],[13,"Debug","","The \"debug\" level.",1],[13,"Trace","","The \"trace\" level.",1],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework."],[13,"Off","","A level lower than all log levels.",2],[13,"Error","","Corresponds to the `Error` log level.",2],[13,"Warn","","Corresponds to the `Warn` log level.",2],[13,"Info","","Corresponds to the `Trace` log level.",2],[13,"Debug","","Corresponds to the `Debug` log level.",2],[13,"Trace","","Corresponds to the `Trace` log level.",2],[5,"max_log_level","","Returns the current maximum log level."],[5,"set_logger","","Sets the global logger."],[5,"enabled","","Determines if the current logger will ignore a log message at the specified\nlevel from the specified module."],[5,"log","","Logs a message."],[8,"Log","","A trait encapsulating the operations required of a logger"],[10,"enabled","","Determines if a log message sent at the specified level from the\nspecified module would be logged.",3],[10,"log","","Logs the `LogRecord`.",3],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"eq","","",1],[11,"partial_cmp","","",1],[11,"partial_cmp","","",1],[11,"cmp","","",1],[6,"Err","",""],[11,"from_str","","",1],[11,"fmt","","",1],[11,"max","","Returns the most verbose logging level.",1],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",1],[11,"fmt","","",2],[11,"clone","","",2],[11,"eq","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",2],[6,"Err","",""],[11,"from_str","","",2],[11,"fmt","","",2],[11,"max","","Returns the most verbose logging level filter.",2],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",2],[11,"new","","Creates a new `LogRecord`.",4],[11,"args","","The message body.",4],[11,"location","","The location of the log directive.",4],[11,"level","","The verbosity level of the message.",4],[11,"fmt","","",0],[11,"clone","","",0],[11,"fmt","","",5],[11,"get","","Gets the current maximum log level filter.",5],[11,"set","","Sets the maximum log level.",5],[11,"fmt","","",6],[11,"fmt","","",6],[11,"description","","",6],[14,"log!","","The standard logging macro."],[14,"error!","","Logs a message at the error level."],[14,"warn!","","Logs a message at the warn level."],[14,"info!","","Logs a message at the info level."],[14,"debug!","","Logs a message at the debug level."],[14,"trace!","","Logs a message at the trace level."],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged."]],"paths":[[3,"LogLocation"],[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[13,"__variant1","","",0],[13,"__variant2","","",0],[4,"FILE","",""],[4,"fpos_t","",""],[0,"c99","libc::types::common",""],[6,"int8_t","libc::types::common::c99",""],[6,"int16_t","",""],[6,"int32_t","",""],[6,"int64_t","",""],[6,"uint8_t","",""],[6,"uint16_t","",""],[6,"uint32_t","",""],[6,"uint64_t","",""],[0,"posix88","libc::types::common",""],[4,"DIR","libc::types::common::posix88",""],[4,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[3,"glob_t","libc::types::os::common::posix01",""],[12,"gl_pathc","","",1],[12,"gl_pathv","","",1],[12,"gl_offs","","",1],[12,"__unused1","","",1],[12,"__unused2","","",1],[12,"__unused3","","",1],[12,"__unused4","","",1],[12,"__unused5","","",1],[3,"timeval","",""],[12,"tv_sec","","",2],[12,"tv_usec","","",2],[3,"timespec","",""],[12,"tv_sec","","",3],[12,"tv_nsec","","",3],[4,"timezone","",""],[6,"pthread_t","",""],[6,"sighandler_t","",""],[0,"bsd44","libc::types::os::common",""],[3,"sockaddr","libc::types::os::common::bsd44",""],[12,"sa_family","","",4],[12,"sa_data","","",4],[3,"sockaddr_storage","",""],[12,"ss_family","","",5],[12,"__ss_align","","",5],[12,"__ss_pad2","","",5],[3,"sockaddr_in","",""],[12,"sin_family","","",6],[12,"sin_port","","",6],[12,"sin_addr","","",6],[12,"sin_zero","","",6],[3,"in_addr","",""],[12,"s_addr","","",7],[3,"sockaddr_in6","",""],[12,"sin6_family","","",8],[12,"sin6_port","","",8],[12,"sin6_flowinfo","","",8],[12,"sin6_addr","","",8],[12,"sin6_scope_id","","",8],[3,"in6_addr","",""],[12,"s6_addr","","",9],[3,"ip_mreq","",""],[12,"imr_multiaddr","","",10],[12,"imr_interface","","",10],[3,"ip6_mreq","",""],[12,"ipv6mr_multiaddr","","",11],[12,"ipv6mr_interface","","",11],[3,"addrinfo","",""],[12,"ai_flags","","",12],[12,"ai_family","","",12],[12,"ai_socktype","","",12],[12,"ai_protocol","","",12],[12,"ai_addrlen","","",12],[12,"ai_addr","","",12],[12,"ai_canonname","","",12],[12,"ai_next","","",12],[3,"sockaddr_un","",""],[12,"sun_family","","",13],[12,"sun_path","","",13],[3,"ifaddrs","",""],[12,"ifa_next","","",14],[12,"ifa_name","","",14],[12,"ifa_flags","","",14],[12,"ifa_addr","","",14],[12,"ifa_netmask","","",14],[12,"ifa_ifu","","",14],[12,"ifa_data","","",14],[6,"socklen_t","",""],[6,"sa_family_t","",""],[6,"in_port_t","",""],[6,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[6,"c_char","libc::types::os::arch::c95",""],[6,"c_schar","",""],[6,"c_uchar","",""],[6,"c_short","",""],[6,"c_ushort","",""],[6,"c_int","",""],[6,"c_uint","",""],[6,"c_long","",""],[6,"c_ulong","",""],[6,"c_float","",""],[6,"c_double","",""],[6,"size_t","",""],[6,"ptrdiff_t","",""],[6,"clock_t","",""],[6,"time_t","",""],[6,"suseconds_t","",""],[6,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[6,"c_longlong","libc::types::os::arch::c99",""],[6,"c_ulonglong","",""],[6,"intptr_t","",""],[6,"uintptr_t","",""],[6,"intmax_t","",""],[6,"uintmax_t","",""],[0,"posix88","libc::types::os::arch",""],[6,"off_t","libc::types::os::arch::posix88",""],[6,"dev_t","",""],[6,"ino_t","",""],[6,"pid_t","",""],[6,"uid_t","",""],[6,"gid_t","",""],[6,"useconds_t","",""],[6,"mode_t","",""],[6,"ssize_t","",""],[0,"posix01","libc::types::os::arch",""],[3,"stat","libc::types::os::arch::posix01",""],[12,"st_dev","","",15],[12,"st_ino","","",15],[12,"st_nlink","","",15],[12,"st_mode","","",15],[12,"st_uid","","",15],[12,"st_gid","","",15],[12,"__pad0","","",15],[12,"st_rdev","","",15],[12,"st_size","","",15],[12,"st_blksize","","",15],[12,"st_blocks","","",15],[12,"st_atime","","",15],[12,"st_atime_nsec","","",15],[12,"st_mtime","","",15],[12,"st_mtime_nsec","","",15],[12,"st_ctime","","",15],[12,"st_ctime_nsec","","",15],[12,"__unused","","",15],[3,"utimbuf","",""],[12,"actime","","",16],[12,"modtime","","",16],[3,"pthread_attr_t","",""],[12,"__size","","",17],[6,"nlink_t","",""],[6,"blksize_t","",""],[6,"blkcnt_t","",""],[0,"extra","libc::types::os::arch",""],[3,"sockaddr_ll","libc::types::os::arch::extra",""],[12,"sll_family","","",18],[12,"sll_protocol","","",18],[12,"sll_ifindex","","",18],[12,"sll_hatype","","",18],[12,"sll_pkttype","","",18],[12,"sll_halen","","",18],[12,"sll_addr","","",18],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[17,"EXIT_FAILURE","libc::consts::os::c95",""],[17,"EXIT_SUCCESS","",""],[17,"RAND_MAX","",""],[17,"EOF","",""],[17,"SEEK_SET","",""],[17,"SEEK_CUR","",""],[17,"SEEK_END","",""],[17,"_IOFBF","",""],[17,"_IONBF","",""],[17,"_IOLBF","",""],[17,"BUFSIZ","",""],[17,"FOPEN_MAX","",""],[17,"FILENAME_MAX","",""],[17,"L_tmpnam","",""],[17,"TMP_MAX","",""],[0,"posix88","libc::consts::os",""],[17,"O_RDONLY","libc::consts::os::posix88",""],[17,"O_WRONLY","",""],[17,"O_RDWR","",""],[17,"O_APPEND","",""],[17,"O_CREAT","",""],[17,"O_EXCL","",""],[17,"O_TRUNC","",""],[17,"S_IFIFO","",""],[17,"S_IFCHR","",""],[17,"S_IFBLK","",""],[17,"S_IFDIR","",""],[17,"S_IFREG","",""],[17,"S_IFLNK","",""],[17,"S_IFMT","",""],[17,"S_IEXEC","",""],[17,"S_IWRITE","",""],[17,"S_IREAD","",""],[17,"S_IRWXU","",""],[17,"S_IXUSR","",""],[17,"S_IWUSR","",""],[17,"S_IRUSR","",""],[17,"F_OK","",""],[17,"R_OK","",""],[17,"W_OK","",""],[17,"X_OK","",""],[17,"STDIN_FILENO","",""],[17,"STDOUT_FILENO","",""],[17,"STDERR_FILENO","",""],[17,"F_LOCK","",""],[17,"F_TEST","",""],[17,"F_TLOCK","",""],[17,"F_ULOCK","",""],[17,"SIGHUP","",""],[17,"SIGINT","",""],[17,"SIGQUIT","",""],[17,"SIGILL","",""],[17,"SIGABRT","",""],[17,"SIGFPE","",""],[17,"SIGKILL","",""],[17,"SIGSEGV","",""],[17,"SIGPIPE","",""],[17,"SIGALRM","",""],[17,"SIGTERM","",""],[17,"PROT_NONE","",""],[17,"PROT_READ","",""],[17,"PROT_WRITE","",""],[17,"PROT_EXEC","",""],[17,"MAP_FILE","",""],[17,"MAP_SHARED","",""],[17,"MAP_PRIVATE","",""],[17,"MAP_FIXED","",""],[17,"MAP_ANON","",""],[17,"MAP_FAILED","",""],[17,"MCL_CURRENT","",""],[17,"MCL_FUTURE","",""],[17,"MS_ASYNC","",""],[17,"MS_INVALIDATE","",""],[17,"MS_SYNC","",""],[17,"EPERM","",""],[17,"ENOENT","",""],[17,"ESRCH","",""],[17,"EINTR","",""],[17,"EIO","",""],[17,"ENXIO","",""],[17,"E2BIG","",""],[17,"ENOEXEC","",""],[17,"EBADF","",""],[17,"ECHILD","",""],[17,"EAGAIN","",""],[17,"ENOMEM","",""],[17,"EACCES","",""],[17,"EFAULT","",""],[17,"ENOTBLK","",""],[17,"EBUSY","",""],[17,"EEXIST","",""],[17,"EXDEV","",""],[17,"ENODEV","",""],[17,"ENOTDIR","",""],[17,"EISDIR","",""],[17,"EINVAL","",""],[17,"ENFILE","",""],[17,"EMFILE","",""],[17,"ENOTTY","",""],[17,"ETXTBSY","",""],[17,"EFBIG","",""],[17,"ENOSPC","",""],[17,"ESPIPE","",""],[17,"EROFS","",""],[17,"EMLINK","",""],[17,"EPIPE","",""],[17,"EDOM","",""],[17,"ERANGE","",""],[17,"EDEADLK","",""],[17,"ENAMETOOLONG","",""],[17,"ENOLCK","",""],[17,"ENOSYS","",""],[17,"ENOTEMPTY","",""],[17,"ELOOP","",""],[17,"EWOULDBLOCK","",""],[17,"ENOMSG","",""],[17,"EIDRM","",""],[17,"ECHRNG","",""],[17,"EL2NSYNC","",""],[17,"EL3HLT","",""],[17,"EL3RST","",""],[17,"ELNRNG","",""],[17,"EUNATCH","",""],[17,"ENOCSI","",""],[17,"EL2HLT","",""],[17,"EBADE","",""],[17,"EBADR","",""],[17,"EXFULL","",""],[17,"ENOANO","",""],[17,"EBADRQC","",""],[17,"EBADSLT","",""],[17,"EDEADLOCK","",""],[17,"EBFONT","",""],[17,"ENOSTR","",""],[17,"ENODATA","",""],[17,"ETIME","",""],[17,"ENOSR","",""],[17,"ENONET","",""],[17,"ENOPKG","",""],[17,"EREMOTE","",""],[17,"ENOLINK","",""],[17,"EADV","",""],[17,"ESRMNT","",""],[17,"ECOMM","",""],[17,"EPROTO","",""],[17,"EMULTIHOP","",""],[17,"EDOTDOT","",""],[17,"EBADMSG","",""],[17,"EOVERFLOW","",""],[17,"ENOTUNIQ","",""],[17,"EBADFD","",""],[17,"EREMCHG","",""],[17,"ELIBACC","",""],[17,"ELIBBAD","",""],[17,"ELIBSCN","",""],[17,"ELIBMAX","",""],[17,"ELIBEXEC","",""],[17,"EILSEQ","",""],[17,"ERESTART","",""],[17,"ESTRPIPE","",""],[17,"EUSERS","",""],[17,"ENOTSOCK","",""],[17,"EDESTADDRREQ","",""],[17,"EMSGSIZE","",""],[17,"EPROTOTYPE","",""],[17,"ENOPROTOOPT","",""],[17,"EPROTONOSUPPORT","",""],[17,"ESOCKTNOSUPPORT","",""],[17,"EOPNOTSUPP","",""],[17,"EPFNOSUPPORT","",""],[17,"EAFNOSUPPORT","",""],[17,"EADDRINUSE","",""],[17,"EADDRNOTAVAIL","",""],[17,"ENETDOWN","",""],[17,"ENETUNREACH","",""],[17,"ENETRESET","",""],[17,"ECONNABORTED","",""],[17,"ECONNRESET","",""],[17,"ENOBUFS","",""],[17,"EISCONN","",""],[17,"ENOTCONN","",""],[17,"ESHUTDOWN","",""],[17,"ETOOMANYREFS","",""],[17,"ETIMEDOUT","",""],[17,"ECONNREFUSED","",""],[17,"EHOSTDOWN","",""],[17,"EHOSTUNREACH","",""],[17,"EALREADY","",""],[17,"EINPROGRESS","",""],[17,"ESTALE","",""],[17,"EUCLEAN","",""],[17,"ENOTNAM","",""],[17,"ENAVAIL","",""],[17,"EISNAM","",""],[17,"EREMOTEIO","",""],[17,"EDQUOT","",""],[17,"ENOMEDIUM","",""],[17,"EMEDIUMTYPE","",""],[17,"ECANCELED","",""],[17,"ENOKEY","",""],[17,"EKEYEXPIRED","",""],[17,"EKEYREVOKED","",""],[17,"EKEYREJECTED","",""],[17,"EOWNERDEAD","",""],[17,"ENOTRECOVERABLE","",""],[17,"ERFKILL","",""],[17,"EHWPOISON","",""],[0,"posix01","libc::consts::os",""],[17,"F_DUPFD","libc::consts::os::posix01",""],[17,"F_GETFD","",""],[17,"F_SETFD","",""],[17,"F_GETFL","",""],[17,"F_SETFL","",""],[17,"SIGTRAP","",""],[17,"SIGPIPE","",""],[17,"SIG_IGN","",""],[17,"GLOB_ERR","",""],[17,"GLOB_MARK","",""],[17,"GLOB_NOSORT","",""],[17,"GLOB_DOOFFS","",""],[17,"GLOB_NOCHECK","",""],[17,"GLOB_APPEND","",""],[17,"GLOB_NOESCAPE","",""],[17,"GLOB_NOSPACE","",""],[17,"GLOB_ABORTED","",""],[17,"GLOB_NOMATCH","",""],[17,"POSIX_MADV_NORMAL","",""],[17,"POSIX_MADV_RANDOM","",""],[17,"POSIX_MADV_SEQUENTIAL","",""],[17,"POSIX_MADV_WILLNEED","",""],[17,"POSIX_MADV_DONTNEED","",""],[17,"_SC_MQ_PRIO_MAX","",""],[17,"_SC_IOV_MAX","",""],[17,"_SC_GETGR_R_SIZE_MAX","",""],[17,"_SC_GETPW_R_SIZE_MAX","",""],[17,"_SC_LOGIN_NAME_MAX","",""],[17,"_SC_TTY_NAME_MAX","",""],[17,"_SC_THREADS","",""],[17,"_SC_THREAD_SAFE_FUNCTIONS","",""],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","",""],[17,"_SC_THREAD_KEYS_MAX","",""],[17,"_SC_THREAD_STACK_MIN","",""],[17,"_SC_THREAD_THREADS_MAX","",""],[17,"_SC_THREAD_ATTR_STACKADDR","",""],[17,"_SC_THREAD_ATTR_STACKSIZE","",""],[17,"_SC_THREAD_PRIORITY_SCHEDULING","",""],[17,"_SC_THREAD_PRIO_INHERIT","",""],[17,"_SC_THREAD_PRIO_PROTECT","",""],[17,"_SC_THREAD_PROCESS_SHARED","",""],[17,"_SC_ATEXIT_MAX","",""],[17,"_SC_XOPEN_VERSION","",""],[17,"_SC_XOPEN_XCU_VERSION","",""],[17,"_SC_XOPEN_UNIX","",""],[17,"_SC_XOPEN_CRYPT","",""],[17,"_SC_XOPEN_ENH_I18N","",""],[17,"_SC_XOPEN_SHM","",""],[17,"_SC_XOPEN_LEGACY","",""],[17,"_SC_XOPEN_REALTIME","",""],[17,"_SC_XOPEN_REALTIME_THREADS","",""],[17,"PTHREAD_CREATE_JOINABLE","",""],[17,"PTHREAD_CREATE_DETACHED","",""],[17,"PTHREAD_STACK_MIN","",""],[17,"CLOCK_REALTIME","",""],[17,"CLOCK_MONOTONIC","",""],[0,"bsd44","libc::consts::os",""],[17,"MADV_NORMAL","libc::consts::os::bsd44",""],[17,"MADV_RANDOM","",""],[17,"MADV_SEQUENTIAL","",""],[17,"MADV_WILLNEED","",""],[17,"MADV_DONTNEED","",""],[17,"MADV_REMOVE","",""],[17,"MADV_DONTFORK","",""],[17,"MADV_DOFORK","",""],[17,"MADV_MERGEABLE","",""],[17,"MADV_UNMERGEABLE","",""],[17,"MADV_HWPOISON","",""],[17,"IFF_LOOPBACK","",""],[17,"AF_UNIX","",""],[17,"AF_INET","",""],[17,"AF_INET6","",""],[17,"SOCK_STREAM","",""],[17,"SOCK_DGRAM","",""],[17,"SOCK_RAW","",""],[17,"IPPROTO_TCP","",""],[17,"IPPROTO_IP","",""],[17,"IPPROTO_IPV6","",""],[17,"IP_MULTICAST_TTL","",""],[17,"IP_MULTICAST_LOOP","",""],[17,"IP_TTL","",""],[17,"IP_HDRINCL","",""],[17,"IP_ADD_MEMBERSHIP","",""],[17,"IP_DROP_MEMBERSHIP","",""],[17,"IPV6_ADD_MEMBERSHIP","",""],[17,"IPV6_DROP_MEMBERSHIP","",""],[17,"TCP_NODELAY","",""],[17,"SOL_SOCKET","",""],[17,"SO_KEEPALIVE","",""],[17,"SO_BROADCAST","",""],[17,"SO_REUSEADDR","",""],[17,"SO_ERROR","",""],[17,"SHUT_RD","",""],[17,"SHUT_WR","",""],[17,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[17,"AF_PACKET","libc::consts::os::extra",""],[17,"IPPROTO_RAW","",""],[17,"O_RSYNC","",""],[17,"O_DSYNC","",""],[17,"O_NONBLOCK","",""],[17,"O_SYNC","",""],[17,"PROT_GROWSDOWN","",""],[17,"PROT_GROWSUP","",""],[17,"MAP_TYPE","",""],[17,"MAP_ANONYMOUS","",""],[17,"MAP_32BIT","",""],[17,"MAP_GROWSDOWN","",""],[17,"MAP_DENYWRITE","",""],[17,"MAP_EXECUTABLE","",""],[17,"MAP_LOCKED","",""],[17,"MAP_NONRESERVE","",""],[17,"MAP_POPULATE","",""],[17,"MAP_NONBLOCK","",""],[17,"MAP_STACK","",""],[0,"sysconf","libc::consts::os",""],[17,"_SC_ARG_MAX","libc::consts::os::sysconf",""],[17,"_SC_CHILD_MAX","",""],[17,"_SC_CLK_TCK","",""],[17,"_SC_NGROUPS_MAX","",""],[17,"_SC_OPEN_MAX","",""],[17,"_SC_STREAM_MAX","",""],[17,"_SC_TZNAME_MAX","",""],[17,"_SC_JOB_CONTROL","",""],[17,"_SC_SAVED_IDS","",""],[17,"_SC_REALTIME_SIGNALS","",""],[17,"_SC_PRIORITY_SCHEDULING","",""],[17,"_SC_TIMERS","",""],[17,"_SC_ASYNCHRONOUS_IO","",""],[17,"_SC_PRIORITIZED_IO","",""],[17,"_SC_SYNCHRONIZED_IO","",""],[17,"_SC_FSYNC","",""],[17,"_SC_MAPPED_FILES","",""],[17,"_SC_MEMLOCK","",""],[17,"_SC_MEMLOCK_RANGE","",""],[17,"_SC_MEMORY_PROTECTION","",""],[17,"_SC_MESSAGE_PASSING","",""],[17,"_SC_SEMAPHORES","",""],[17,"_SC_SHARED_MEMORY_OBJECTS","",""],[17,"_SC_AIO_LISTIO_MAX","",""],[17,"_SC_AIO_MAX","",""],[17,"_SC_AIO_PRIO_DELTA_MAX","",""],[17,"_SC_DELAYTIMER_MAX","",""],[17,"_SC_MQ_OPEN_MAX","",""],[17,"_SC_VERSION","",""],[17,"_SC_PAGESIZE","",""],[17,"_SC_RTSIG_MAX","",""],[17,"_SC_SEM_NSEMS_MAX","",""],[17,"_SC_SEM_VALUE_MAX","",""],[17,"_SC_SIGQUEUE_MAX","",""],[17,"_SC_TIMER_MAX","",""],[17,"_SC_BC_BASE_MAX","",""],[17,"_SC_BC_DIM_MAX","",""],[17,"_SC_BC_SCALE_MAX","",""],[17,"_SC_BC_STRING_MAX","",""],[17,"_SC_COLL_WEIGHTS_MAX","",""],[17,"_SC_EXPR_NEST_MAX","",""],[17,"_SC_LINE_MAX","",""],[17,"_SC_RE_DUP_MAX","",""],[17,"_SC_2_VERSION","",""],[17,"_SC_2_C_BIND","",""],[17,"_SC_2_C_DEV","",""],[17,"_SC_2_FORT_DEV","",""],[17,"_SC_2_FORT_RUN","",""],[17,"_SC_2_SW_DEV","",""],[17,"_SC_2_LOCALEDEF","",""],[17,"_SC_2_CHAR_TERM","",""],[17,"_SC_2_C_VERSION","",""],[17,"_SC_2_UPE","",""],[17,"_SC_XBS5_ILP32_OFF32","",""],[17,"_SC_XBS5_ILP32_OFFBIG","",""],[17,"_SC_XBS5_LPBIG_OFFBIG","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[5,"isalnum","libc::funcs::c95::ctype",""],[5,"isalpha","",""],[5,"iscntrl","",""],[5,"isdigit","",""],[5,"isgraph","",""],[5,"islower","",""],[5,"isprint","",""],[5,"ispunct","",""],[5,"isspace","",""],[5,"isupper","",""],[5,"isxdigit","",""],[5,"tolower","",""],[5,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[5,"fopen","libc::funcs::c95::stdio",""],[5,"freopen","",""],[5,"fflush","",""],[5,"fclose","",""],[5,"remove","",""],[5,"rename","",""],[5,"tmpfile","",""],[5,"setvbuf","",""],[5,"setbuf","",""],[5,"fgetc","",""],[5,"fgets","",""],[5,"fputc","",""],[5,"fputs","",""],[5,"puts","",""],[5,"ungetc","",""],[5,"fread","",""],[5,"fwrite","",""],[5,"fseek","",""],[5,"ftell","",""],[5,"rewind","",""],[5,"fgetpos","",""],[5,"fsetpos","",""],[5,"feof","",""],[5,"ferror","",""],[5,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[5,"abs","libc::funcs::c95::stdlib",""],[5,"labs","",""],[5,"atof","",""],[5,"atoi","",""],[5,"strtod","",""],[5,"strtol","",""],[5,"strtoul","",""],[5,"calloc","",""],[5,"malloc","",""],[5,"realloc","",""],[5,"free","",""],[5,"exit","","Exits the running program in a possibly dangerous manner."],[5,"_exit","",""],[5,"atexit","",""],[5,"system","",""],[5,"getenv","",""],[5,"rand","",""],[5,"srand","",""],[0,"string","libc::funcs::c95",""],[5,"strcpy","libc::funcs::c95::string",""],[5,"strncpy","",""],[5,"strcat","",""],[5,"strncat","",""],[5,"strcmp","",""],[5,"strncmp","",""],[5,"strcoll","",""],[5,"strchr","",""],[5,"strrchr","",""],[5,"strspn","",""],[5,"strcspn","",""],[5,"strpbrk","",""],[5,"strstr","",""],[5,"strlen","",""],[5,"strerror","",""],[5,"strtok","",""],[5,"strxfrm","",""],[5,"wcslen","",""],[5,"memcmp","",""],[5,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[5,"chmod","libc::funcs::posix88::stat_",""],[5,"fchmod","",""],[5,"fstat","",""],[5,"mkdir","",""],[5,"mkfifo","",""],[5,"stat","",""],[0,"stdio","libc::funcs::posix88",""],[5,"popen","libc::funcs::posix88::stdio",""],[5,"pclose","",""],[5,"fdopen","",""],[5,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[5,"open","libc::funcs::posix88::fcntl",""],[5,"creat","",""],[5,"fcntl","",""],[0,"dirent","libc::funcs::posix88",""],[5,"opendir","libc::funcs::posix88::dirent",""],[5,"readdir_r","",""],[5,"closedir","",""],[5,"rewinddir","",""],[5,"seekdir","",""],[5,"telldir","",""],[0,"unistd","libc::funcs::posix88",""],[5,"access","libc::funcs::posix88::unistd",""],[5,"alarm","",""],[5,"chdir","",""],[5,"chown","",""],[5,"close","",""],[5,"dup","",""],[5,"dup2","",""],[5,"execv","",""],[5,"execve","",""],[5,"execvp","",""],[5,"fork","",""],[5,"fpathconf","",""],[5,"getcwd","",""],[5,"getegid","",""],[5,"geteuid","",""],[5,"getgid","",""],[5,"getgroups","",""],[5,"getlogin","",""],[5,"getopt","",""],[5,"getpgrp","",""],[5,"getpid","",""],[5,"getppid","",""],[5,"getuid","",""],[5,"getsid","",""],[5,"isatty","",""],[5,"link","",""],[5,"lseek","",""],[5,"pathconf","",""],[5,"pause","",""],[5,"pipe","",""],[5,"read","",""],[5,"rmdir","",""],[5,"setgid","",""],[5,"setpgid","",""],[5,"setsid","",""],[5,"setuid","",""],[5,"sleep","",""],[5,"usleep","",""],[5,"nanosleep","",""],[5,"sysconf","",""],[5,"tcgetpgrp","",""],[5,"ttyname","",""],[5,"unlink","",""],[5,"write","",""],[5,"pread","",""],[5,"pwrite","",""],[5,"utime","",""],[17,"_PC_NAME_MAX","",""],[0,"signal","libc::funcs::posix88",""],[5,"kill","libc::funcs::posix88::signal",""],[0,"mman","libc::funcs::posix88",""],[5,"mlock","libc::funcs::posix88::mman",""],[5,"munlock","",""],[5,"mlockall","",""],[5,"munlockall","",""],[5,"mmap","",""],[5,"munmap","",""],[5,"mprotect","",""],[5,"msync","",""],[5,"shm_open","",""],[5,"shm_unlink","",""],[0,"net","libc::funcs::posix88",""],[5,"if_nametoindex","libc::funcs::posix88::net",""],[0,"posix01","libc::funcs",""],[0,"stat_","libc::funcs::posix01",""],[5,"lstat","libc::funcs::posix01::stat_",""],[0,"unistd","libc::funcs::posix01",""],[5,"readlink","libc::funcs::posix01::unistd",""],[5,"fsync","",""],[5,"fdatasync","",""],[5,"setenv","",""],[5,"unsetenv","",""],[5,"putenv","",""],[5,"symlink","",""],[5,"ftruncate","",""],[0,"signal","libc::funcs::posix01",""],[5,"signal","libc::funcs::posix01::signal",""],[0,"glob","libc::funcs::posix01",""],[5,"glob","libc::funcs::posix01::glob",""],[5,"globfree","",""],[0,"mman","libc::funcs::posix01",""],[5,"posix_madvise","libc::funcs::posix01::mman",""],[0,"bsd43","libc::funcs",""],[5,"socket","libc::funcs::bsd43",""],[5,"connect","",""],[5,"bind","",""],[5,"listen","",""],[5,"accept","",""],[5,"getpeername","",""],[5,"getsockname","",""],[5,"setsockopt","",""],[5,"recv","",""],[5,"send","",""],[5,"recvfrom","",""],[5,"sendto","",""],[5,"getifaddrs","",""],[5,"freeifaddrs","",""],[5,"shutdown","",""],[0,"bsd44","libc::funcs",""],[5,"getdtablesize","libc::funcs::bsd44",""],[5,"ioctl","",""],[5,"madvise","",""],[5,"mincore","",""]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"sockaddr_ll"]]};
searchIndex['phf_shared'] = {"items":[[0,"","phf_shared",""],[5,"displace","",""],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures"],[10,"phf_hash","","Hashes the value of `self`, factoring in a seed",0]],"paths":[[8,"PhfHash"]]};
searchIndex['mopa'] = {"items":[[0,"","mopa","**MOPA: My Own Personal Any.** A macro to implement all the `Any` methods on your own trait."],[14,"mopafy!","","The macro for implementing all the `Any` methods on your own trait."]],"paths":[]};
searchIndex['matches'] = {"items":[[0,"","matches",""],[14,"matches!","",""],[14,"_tt_as_expr_hack!","","Work around \"error: unexpected token: `an interpolated tt`\", whatever that means."]],"paths":[]};
initSearch(searchIndex);
